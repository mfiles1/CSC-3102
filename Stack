//follow the LIFO principle using dynamic array or linked list
public class Stack<Stype>{
private DynamicArray<Stype>topStack
private int size;
}
public Stack(){
topStack=new DynamicArray<Stype>();
size= new size;
}
public Push(Stype item){
topStack.Add(item);
}
public Pop(){
if(topStack == -1){
    print("Empty");
}
return topStack.Remove(topStack.size()-1);
}
public Peak(){
if(topStack == -1){
    print("Empty");
}
    return topStack.Remove(topStack.size()-1);
}
public Size(){
return topStack.Size();
}

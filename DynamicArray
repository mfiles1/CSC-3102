//supporting data types and resizing 
public class DynamicArray<Atype>{ 
private int currentSize;
private A[] num_elements;
public DynamicArray(){ //primitive array 
num_elements=new A[10]; //capacity
currentSize=0;
}
public void Add(Atype item, int pos){ //inserting items
if (pos <0 || pos> currentSize)
if(currentSize == num_elements.Length) Resize(); 
for(int i = currentSize; i > pos; i--){
    num_elements[i]= num_elements[i-1];
}
num_elements[pos]=item;
currentSize++; //resized items
}
public Remove(int pos){ //removing items
if(pos <0|| pos >= currentSize){
    print(Error);
}
for( int i = posl i < currentSize-1; i++)
{
    num_elements[i]=num_elements[i+1];
}
num_elements[currentSize-1]=default(A);
currentSize--;
}
public Get(int pos){
    if(pos <0 || pos>= currentSize){
    print(error);
    }
    return num_elements[pos]; //returning item to its postions
}

public Set(Atype val, int pos){
    if(pos < 0 || pos >= currentSize){ //updating
        print(error);
    }
    num_elements[pos]=val;
}
public Size(){
    return currentSize; //updated item
}
}
public Remove(int pos){ //removing
if(pos <0|| pos >= currentSize)
{
    print(error);
}
for( int i = posl i < currentSize-1; i++)
{
    num_elements[i]=num_elements[i+1];
}
num_elements[currentSize-1]=default(A);
currentSize--;
}
public Get(int pos){
    if(pos <0 || pos>= currentSize){
    print(error);
    }
    return num_elements[pos];
}
public Set(Atype val, int pos){
    if(pos < 0 || pos >= currentSize){
        print(error);
    }
    num_elements[pos]=val;
}
public Size(){
    return currentSize;
}
}
